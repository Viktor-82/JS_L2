'use strict'

/* Регулярные выражения
Регулярные выражения - это шаблоны, используемые для сопоставления последовательностей символов в строках. В JavaScript регулярные выражения также являются объектами. Эти шаблоны используются в методах exec и test объекта RegExp, а также match, replace, search и split объекта String. */

/* Объявление регулярного выражения возможно 2 способами */
const options1 = new RegExp('pattern'); // новый экземпляр класса RegExp и передаем в него выражение
const options2 = /patterh/; // записываем выражение в переменную

/* Основные правила регулярных выражений */
//    /abc/      Идущие подряд символы abc
//    /[abc]/    Один из символов a, b или c
//    /[^abc]/   Ни один из символов, т. е. не а, не b и не c
//    /[a-z]/    Диапазон символов, идущих подряд в таблице Unicode
//    /\b/       Граница слова
//    /\B/       Не граница слова
//    /\d/       Цифра
//    /\D/       Не цифра
//    /\w/       Латинская буква, цифра или _
//    /\W/       Не латинская буква, не цифра и не _
//    /\s/       Пробельный символ
//    /\S/       Непробельный символ
//    /a{3}/     Строго 3 символа а подряд
//    /a{2,4}/   От 2 до 4 символов а подряд
//    /a+/       1 и более символов а подряд
//    /a*/       0 и более символов а подряд
//    /a?/       0 или 1 символ а
//    /./        Один любой символ, кроме переноса строки
//               И другие правила (см.  )

/* Флаги влияющие на поиск 
g  (global)       - поиск всех соответствий
i  (intensitive)  - поиск без учета регистра 
m  (multiline)    - многострочный текст    */
// синтаксис написания флагов за закрывающим слешем или вторым параметром RegExp()
const regexp1 = new RegExp('abc', 'g');
const regexp2 = /abc/g;
const regexp3 = new RegExp('abc', 'gi');
const regexp4 = /abc/gm;



/* Логическое или |  */
/gr(a|e)y/



/* Метод test()  позволяет узнать есть ли совпадения (true or false) */
const str = '123 abc 456';
var regexp = /abc/;
regexp.test(str); // Вернёт true
var regexp2 = /xyz/;
regexp2.test(str); // Вернёт false


/* Метод mutch() возвращает массив найденых совпадений */
const str = 'Geek from Geekbrains';
const regexp = /Geek/;
console.log(str.match(regexp)); //  ['Geek']

const regexp2 = /Geek/g;
console.log(str.match(regexp2)); //  ['Geek', 'Geek']


/* Метод replace() замена части строки  */
const str = 'This is string';
const regexp = /is/g; // Ищет все вхождения is
str.replace(regexp, '+'); // Заменит is на + и вернёт 'Th+ + string'


/* Жадный поиск находит максимальную строку удовлетворяющую условию. */
const str = '000 1221 133331';
let regexp = /1.+1/g; // синтаксис жадного поиска
let text = '000 1221 133331';
text.match(regexp); // ['1221 133331']


/* Нежадный - поиск находит минимальную строку удовлетворяющую условию */
const str = '000 1221 133331';
var regexp = /1.+?1/g; // синтаксис нежадного (ленивого) поиска
let text = '000 1221 133331';
text.match(regexp); // ['1221', '133331']


/* Также для работы с регулярными выражениями необходимо знать спецсимволы  
https://javascript.ru/RegExp
*/


/* Для проверки/отработки регулярных выражений на практике есть ресурс
https://regex101.com/
 */


/* 
Некоторые готовые регулярные выражения 
*/
/* Проверка на URL
 Учитывает протоколы http и https, дефисы, подчеркивания, точки и внутреннюю файловую структуру */
/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/ ;

/* Проверка на Email 
учитывает точки и дефисы в логине и домене. Есть ограничение по длине домена первого уровня */
/^([a-z0-9_\.-]+)@([a-z0-9_\.-]+)\.([a-z\.]{2,6})$/  ;